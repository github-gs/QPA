#####################################    RNA-Seq Data   ##############################




library('stringr')
file_names=list.files('/Users/gaosheng/文件/BCM_Re_Sequencing/htseq_output/')
table=list()
for(item in file_names){
  name=substring(item,1,str_locate(item,'_')[1]-1)
  tab<-read.table(paste('/Users/gaosheng/文件/BCM_Re_Sequencing/htseq_output/',item,sep=''),sep='\t')
  n=nrow(tab)
  tab<-tab[-c(n-4,n-3,n-2,n-1,n),]
  colnames(tab)=c("ID",name)
  table[[name]]<-tab
}
merge_table=Reduce(function(x,y) merge(x,y,all=T),table)

########行名对应
rownames(merge_table)=merge_table[,1]
merge_table=merge_table[,-1]

merge_table1=merge_table[,1:18]
merge_table2=merge_table[,19:36]




########################################################
############ diffrential expression analysis
########################################################

######  1. DESeq2
library(DESeq2)
condition<-c('hx','hx','hx','sham','sham','sham','jd','jd','jd','model','model','model','quan','quan','quan','wen','wen','wen')
group<-colnames(merge_table1)
coldata<-data.frame(group=group,condition=condition)
rownames(coldata)=group

getdiff<-function(a,b,c,dataframe,condition){
  #### groups to be compared
  index<-is.na(factor(condition,levels=c(a,b)))==FALSE
  con<-condition[index]
  ndata=dataframe[,index]
  coldata_data=data.frame(sample=colnames(ndata),condition=con)
  dds<-DESeqDataSetFromMatrix(countData = ndata,colData = coldata_data,design = ~ condition)
  dds$condition <- relevel(dds$condition, ref = c) ######### refrence

  keep <- rowSums(counts(dds)) >= 50
  dds <- dds[keep,]
  dds <- DESeq(dds)
  res<- results(dds)
  resOrdered <- res[order(res$padj),]
  resOrdered<-as.data.frame(resOrdered)

  diffmRNA=resOrdered[2**abs(resOrdered$log2FoldChange)>1.5&resOrdered$padj<0.05&is.na(resOrdered$padj)==FALSE,]
  return(diffmRNA)
}
diffsham=getdiff('model','sham','sham',merge_table1,condition)
diffquan=getdiff('quan','model','model',merge_table1,condition)
diffhx=getdiff('hx','model','model',merge_table1,condition)
diffjd=getdiff('jd','model','model',merge_table1,condition)
diffwen=getdiff('wen','model','model',merge_table1,condition)

diffsham2=getdiff('model','sham','sham',merge_table2,condition)
diffquan2=getdiff('quan','model','model',merge_table2,condition)
diffhx2=getdiff('hx','model','model',merge_table2,condition)
diffjd2=getdiff('jd','model','model',merge_table2,condition)
diffwen2=getdiff('wen','model','model',merge_table2,condition)
#### dataframe=merge_table

















########2.NOISEQ
library('NOISeq')
library('HTSFilter')
library('stringr')
condition<-c('hx','hx','hx','sham','sham','sham','jd','jd','jd','model','model','model','quan','quan','quan','wen','wen','wen')


NOIgetdiff<-function(dataframe,a,b){
  tab=dataframe[,is.na(factor(condition,levels=c(a,b)))==FALSE]
  x=substr(colnames(tab)[1],1,1)
  y=substr(colnames(tab)[4],1,1)
  con=rep(c(x,y),each=3)
  filter <- HTSFilter(tab,con,s.len=50)######## filiter reads counts < 50
  filtered_ReadsPerGene <- filter$filteredData
  tab=filtered_ReadsPerGene

  Factor=data.frame(type=rep(c(x,y),each=3),typerun=rep(c(x,y),each=3))
  mydata<-readData(data=tab,factors=Factor)
  mynoiseq = noiseqbio(mydata, norm = "tmm", factor = "type",filter = 0,r=1000,lc=0)
  mynoiseq.deg = degenes(mynoiseq, q = 0.95, M = NULL)
  fdr<-sapply(mynoiseq.deg[,4],function(x) 1-x)
  mynoiseq.deg<-cbind(mynoiseq.deg,fdr)
  c<-mynoiseq.deg[abs(mynoiseq.deg[,5])>log2(1.5),]
  # c<-mynoiseq.deg
  list=list()
  list[[1]]=c
  list[[2]]=nrow(filtered_ReadsPerGene)
  return(list)
}
########### 新组织
NOIdiffSH=NOIgetdiff(merge_table1,'model','sham')
nrow(NOIdiffSH[[1]])
nrow(NOIdiffSH[[1]][NOIdiffSH[[1]][,5]>0,])
nrow(NOIdiffSH[[1]][NOIdiffSH[[1]][,5]<0,])

NOIdiffQS=NOIgetdiff(merge_table1,'quan','model')
nrow(NOIdiffQS[[1]])
nrow(NOIdiffQS[[1]][NOIdiffQS[[1]][,5]>0,])
nrow(NOIdiffQS[[1]][NOIdiffQS[[1]][,5]<0,])

NOIdiffWY=NOIgetdiff(merge_table1,'wen','model')
nrow(NOIdiffWY[[1]])
nrow(NOIdiffWY[[1]][NOIdiffWY[[1]][,5]>0,])
nrow(NOIdiffWY[[1]][NOIdiffWY[[1]][,5]<0,])

NOIdiffHX=NOIgetdiff(merge_table1,'hx','model')
nrow(NOIdiffHX[[1]])
nrow(NOIdiffHX[[1]][NOIdiffHX[[1]][,5]>0,])
nrow(NOIdiffHX[[1]][NOIdiffHX[[1]][,5]<0,])

NOIdiffJD=NOIgetdiff(merge_table1,'jd','model')
nrow(NOIdiffJD[[1]])
NOIdiffJD[[1]][rownames(NOIdiffJD[[1]])=='ENSRNOG00000020985',]
nrow(NOIdiffJD[[1]][NOIdiffJD[[1]][,5]>0,])
nrow(NOIdiffJD[[1]][NOIdiffJD[[1]][,5]<0,])

NOIdiffQS[[1]][rownames(NOIdiffQS[[1]])=='ENSRNOG00000020985',]

transID<-function(id){
  geneid<-tryCatch(
    bitr(id,fromType = 'ENSEMBL',toType = "ENTREZID",OrgDb = "org.Rn.eg.db")[1,2],

    error=function(error_message) {
      # message("And below is the error message from R:")
      message(error_message)
      return('NA')
    }
  )
  return(geneid)
}
transID_sybl<-function(id){
  geneid<-tryCatch(
    bitr(id,fromType = 'ENSEMBL',toType = "SYMBOL",OrgDb = "org.Rn.eg.db")[1,2],

    error=function(error_message) {
      # message("And below is the error message from R:")
      message(error_message)
      return('NA')
    }
  )
  return(geneid)
}
########################### add entrez id and gene symbol
entrezid<-c()
for(i in 1:nrow(NOIdiffSH[[1]])){
  entrezid<-c(entrezid,transID(rownames(NOIdiffSH[[1]])[i]))
}

symbol<-c()
for(i in 1:nrow(NOIdiffSH[[1]])){
  symbol<-c(symbol,transID_sybl(rownames(NOIdiffSH[[1]])[i]))
}
DEG_SH<-cbind(symbol,NOIdiffSH[[1]])
DEG_SH<-cbind(entrezid,DEG_SH)

entrezid_qs<-c()
for(i in 1:nrow(NOIdiffQS[[1]])){
  entrezid_qs<-c(entrezid_qs,transID(rownames(NOIdiffQS[[1]])[i]))
}

symbol_qs<-c()
for(i in 1:nrow(NOIdiffQS[[1]])){
  symbol_qs<-c(symbol_qs,transID_sybl(rownames(NOIdiffQS[[1]])[i]))
}
DEG_QS<-cbind(symbol_qs,NOIdiffQS[[1]])
DEG_QS<-cbind(entrezid_qs,DEG_QS)

entrezid_jd<-c()
for(i in 1:nrow(NOIdiffJD[[1]])){
  entrezid_jd<-c(entrezid_jd,transID(rownames(NOIdiffJD[[1]])[i]))
}

symbol_jd<-c()
for(i in 1:nrow(NOIdiffJD[[1]])){
  symbol_jd<-c(symbol_jd,transID_sybl(rownames(NOIdiffJD[[1]])[i]))
}
DEG_JD<-cbind(symbol_jd,NOIdiffJD[[1]])
DEG_JD<-cbind(entrezid_jd,DEG_JD)

entrezid_WY<-c()
for(i in 1:nrow(NOIdiffWY[[1]])){
  entrezid_WY<-c(entrezid_WY,transID(rownames(NOIdiffWY[[1]])[i]))
}

symbol_WY<-c()
for(i in 1:nrow(NOIdiffWY[[1]])){
  symbol_WY<-c(symbol_WY,transID_sybl(rownames(NOIdiffWY[[1]])[i]))
}
DEG_WY<-cbind(symbol_WY,NOIdiffWY[[1]])
DEG_WY<-cbind(entrezid_WY,DEG_WY)

entrezid_HX<-c()
for(i in 1:nrow(NOIdiffHX[[1]])){
  entrezid_HX<-c(entrezid_HX,transID(rownames(NOIdiffHX[[1]])[i]))
}

symbol_HX<-c()
for(i in 1:nrow(NOIdiffHX[[1]])){
  symbol_HX<-c(symbol_HX,transID_sybl(rownames(NOIdiffHX[[1]])[i]))
}
DEG_HX<-cbind(symbol_HX,NOIdiffHX[[1]])
DEG_HX<-cbind(entrezid_HX,DEG_HX)
write.csv(DEG_SH,'/Users/gaosheng/Desktop/sh.csv')
write.csv(DEG_HX,'/Users/gaosheng/Desktop/hx.csv')
write.csv(DEG_JD,'/Users/gaosheng/Desktop/jd.csv')
write.csv(DEG_QS,'/Users/gaosheng/Desktop/qs.csv')
write.csv(DEG_WY,'/Users/gaosheng/Desktop/wy.csv')



NOIdiffSH2=NOIgetdiff(merge_table2,'model','sham')
nrow(NOIdiffSH2[[1]])
nrow(NOIdiffSH2[[1]][NOIdiffSH2[[1]][,5]>0,])
nrow(NOIdiffSH2[[1]][NOIdiffSH2[[1]][,5]<0,])

NOIdiffQS2=NOIgetdiff(merge_table2,'quan','model')
nrow(NOIdiffQS2[[1]])
nrow(NOIdiffQS2[[1]][NOIdiffQS2[[1]][,5]>0,])
nrow(NOIdiffQS2[[1]][NOIdiffQS2[[1]][,5]<0,])

NOIdiffWY2=NOIgetdiff(merge_table2,'wen','model')
nrow(NOIdiffWY2[[1]])
nrow(NOIdiffWY2[[1]][NOIdiffWY2[[1]][,5]>0,])
nrow(NOIdiffWY2[[1]][NOIdiffWY2[[1]][,5]<0,])

NOIdiffHX2=NOIgetdiff(merge_table2,'hx','model')
nrow(NOIdiffHX2[[1]])
nrow(NOIdiffHX2[[1]][NOIdiffHX2[[1]][,5]>0,])
nrow(NOIdiffHX2[[1]][NOIdiffHX2[[1]][,5]<0,])

NOIdiffJD2=NOIgetdiff(merge_table2,'jd','model')
nrow(NOIdiffJD2[[1]])
nrow(NOIdiffJD2[[1]][NOIdiffJD2[[1]][,5]>0,])
nrow(NOIdiffJD2[[1]][NOIdiffJD2[[1]][,5]<0,])


#ang2
x=merge_table[rownames(merge_table)=='ENSRNOG00000025562',]
write.csv(t(x),'/Users/gaosheng/Desktop/x.csv')

#tnf
y=merge_table[rownames(merge_table)=='ENSRNOG00000055156',]
write.csv(t(y),'/Users/gaosheng/Desktop/y.csv')

#IL6
z=merge_table[rownames(merge_table)=='ENSRNOG00000010278',]
write.csv(t(z),'/Users/gaosheng/Desktop/z.csv')

#sod3
a=merge_table[rownames(merge_table)=='ENSRNOG00000003869',]
write.csv(t(a),'/Users/gaosheng/Desktop/a.csv')

#sod1
b=merge_table[rownames(merge_table)=='ENSRNOG00000002115',]
write.csv(t(b),'/Users/gaosheng/Desktop/b.csv')
#
#
# ############ 3. edgeR计算差异
library(edgeR)
library(limma)

getdiff_edgeR<-function(dataframe,condition,a,b){

  index<-is.na(factor(condition,levels=c(a,b)))==FALSE
  con<-condition[index]
  ndata=dataframe[,index]


  ###### normalization

  # the true progress of normalization
  # factors <- calcNormFactors(ndata,group=cond,method = 'TMM')   ######## calculate norm factors by groups
  # norm_data<-as.matrix(ndata)/factors
  design <- model.matrix(~0+con)
  rownames(design)=colnames(ndata)



  y<- DGEList(counts=ndata,group=con)
  y<-calcNormFactors(y,method = 'TMM')
  y <- estimateDisp(y, design, robust=TRUE)    # describe disperation


  #
  # ####### get diff genes
  fit <- glmQLFit(y, design)
  qlf=glmQLFTest(fit)
  # lrt <- glmLRT(fit,coef=2)  ######### another method to do the test
  # constrat=makeContrasts( - levels(con)[2], levels=design)
  # tr=glmTreat(fit,lfc = log2(1.5))
  top <- topTags(qlf) ####### check top genes
  sm=summary(decideTests(qlf)) #### summary limit genes
  print(sm)
  return(qlf)
}

edgeR_diff=getdiff_edgeR(merge_table1,condition,'quan','model')



###############################################################################
########## Using HTSFilter normalization is better. Method is TMM normalization.
library('HTSFilter')
normed_tab=normalizeData(merge_table1, normalization='TMM')$data.norm
#
#
# ############ conclusion: 三种方法差别不大，所以不是差异分析方法的问题
# ###########              hisat2比对是根绝Rn6 gene.fa建库，htseq 计算counts数。





####################################################################
###################### 通路定量 ####################################
####################################################################

## try http:// if https:// URLs are not supported
# source("https://bioconductor.org/biocLite.R")
# biocLite("org.Rn.eg.db")
library(org.Rn.eg.db)
library(clusterProfiler)
library(KEGGREST)

library(KEGGREST)
path.list<-keggLink("pathway",'rno')
genes=gsub(paste('rno',":",sep=""),"",names(path.list))
paths=gsub(paste('path',":",sep=""),"",path.list)
kg.sets=split(genes,paths)

#######    通路富集函数
enrichkegg<-function(ensemblid){
  geneid<-bitr(ensemblid,fromType = 'ENSEMBL',toType = 'ENTREZID',OrgDb = 'org.Rn.eg.db', drop = FALSE)
  keggpath<-enrichKEGG(as.character(geneid[,2]),organism = "rno", pvalueCutoff = 0.05,pAdjustMethod = "none",  qvalueCutoff = Inf)
  pathway<-summary(keggpath)
  return(pathway)
}

############### kegg pathway enrichments
model_sham_pathway=enrichkegg(rownames(NOIdiffSH[[1]]))
quan_model_pathway=enrichkegg(rownames(NOIdiffQS[[1]]))
jd_model_pathway=enrichkegg(rownames(NOIdiffJD[[1]]))
wen_model_pathway=enrichkegg(rownames(NOIdiffWY[[1]]))
hx_model_pathway=enrichkegg(rownames(NOIdiffHX[[1]]))
write.csv(model_sham_pathway,'/Users/gaosheng/文件/BCM_Re_Sequencing/model_sham_pathway.csv')
write.csv(quan_model_pathway,'/Users/gaosheng/文件/BCM_Re_Sequencing/quan_model_pathway.csv')
write.csv(jd_model_pathway,'/Users/gaosheng/文件/BCM_Re_Sequencing/jd_model_pathway.csv')
write.csv(wen_model_pathway,'/Users/gaosheng/文件/BCM_Re_Sequencing/wen_model_pathway.csv')
write.csv(hx_model_pathway,'/Users/gaosheng/文件/BCM_Re_Sequencing/hx_model_pathway.csv')

####### up-regulated gene enriced pathway
library(ggplot2)
up_logFDR=-log10(model_sham_pathway$p.adjust)
up_data<-cbind(model_sham_pathway,up_logFDR)
up_idx <- order(up_data$up_logFDR,decreasing = FALSE)
up_data$Description <- factor(up_data$Description, levels= up_data$Description[up_idx])
# up_p1<-ggplot(up_data,aes(y=Count, x=Description)) +theme_bw()+ geom_bar(stat="identity",width=0.3, position=position_dodge(0.3),aes(fill=up_logFDR),col="black")+scale_fill_gradient(low='white',high='red') + theme(axis.title.x=element_text(size=10,face='bold'),axis.text.x=element_text(size=8,,face='bold',vjust=0),axis.text.y=element_text(size=6,vjust=0,face='bold'),axis.title.y=element_text(size=10,face='bold')) + xlab('KEGG Pathway')+ ylab('Gene Counts')+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),panel.border=element_blank())+theme(axis.ticks=element_blank())+coord_flip()
up_p1<-ggplot(up_data,aes_string(x='Description',y='Count',size='up_logFDR',color='up_logFDR')) +theme_bw()+ geom_point() +ggtitle("Model vs Sham: Pathway Enrichment") + scale_size_continuous(limits=c(0,40)) +scale_color_gradient(low="blue", high="red",limits=c(0,40)) + theme(axis.title.x=element_text(size=12,face='bold'),axis.text.x=element_text(size=8,face='bold',vjust=0),axis.text.y=element_text(size=6,vjust=0,face='bold'),axis.title.y=element_text(size=12,face='bold')) + xlab('KEGG Pathway')+ ylab('Gene Counts')+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),panel.border=element_blank())+coord_flip()

up_p1$labels$fill='-log10(p-value)'
plot(up_p1)


############ intersect common pathways
common_quan_model_pathway=intersect(quan_model_pathway[,1],model_sham_pathway[,1])
common_jd_model_pathway=intersect(model_sham_pathway[,1],jd_model_pathway[,1])
common_wen_model_pathway=intersect(model_sham_pathway[,1],wen_model_pathway[,1])
common_hx_model_pathway=intersect(hx_model_pathway[,1],model_sham_pathway[,1])

common_quan_jd_pathway=intersect(jd_model_pathway[,1],quan_model_pathway[,1])
common_quan_wen_pathway=intersect(wen_model_pathway[,1],quan_model_pathway[,1])
common_quan_hx_pathway=intersect(hx_model_pathway[,1],quan_model_pathway[,1])


################ union pathway
all_pathway=union(model_sham_pathway[,1],quan_model_pathway[,1])
all_pathway=union(all_pathway,jd_model_pathway[,1])
all_pathway=union(all_pathway,wen_model_pathway[,1])
all_pathway=union(all_pathway,hx_model_pathway[,1])

all_gene_in_pathway=c()
for(i in 1:length(all_pathway)){
  gene_in_pathway=kg.sets[[all_pathway[i]]]
  all_gene_in_pathway=union(all_gene_in_pathway,gene_in_pathway)
}



################## Get Pathway Descriptions from pathway summary
Description_pathway<-function(pathway_summmary,commmon_pathway){
  des<-data.frame()
  for(i in 1:length(commmon_pathway)){
    for(j in 1:nrow(pathway_summmary)){
      if(commmon_pathway[i]==pathway_summmary[j,1]){
        des<-rbind(des,pathway_summmary[j,c(1,2)])
        break
        }
    }
  }
  return(des)
}
des_quan_model<-Description_pathway(quan_model_pathway,common_quan_model_pathway)
des_jd_model<-Description_pathway(jd_model_pathway,common_jd_model_pathway)
des_wen_model<-Description_pathway(wen_model_pathway,common_wen_model_pathway)
des_hx_model<-Description_pathway(hx_model_pathway,common_hx_model_pathway)


des_path<-rbind(model_sham_pathway[,1:2],quan_model_pathway[,1:2],jd_model_pathway[,1:2],wen_model_pathway[,1:2],hx_model_pathway[,1:2])
des_path<-des_path[!duplicated(des_path),]


des_quan_jd_model<-Description_pathway(jd_model_pathway,common_quan_jd_pathway)
des_quan_wen_model<-Description_pathway(wen_model_pathway,common_quan_wen_pathway)
des_quan_hx_model<-Description_pathway(hx_model_pathway,common_quan_hx_pathway)


# ################ delete un-heart-related pathways
# common_quan_model_pathway_main=common_quan_model_pathway[c(2,3,7,9,14,15,17,18,20,22,26,28,30:33)]
# common_jd_model_pathway_main=common_jd_model_pathway[c(1,3:5,7,9,103,16,19)]
# common_wen_model_pathway_main=common_wen_model_pathway[c(4:6,8,10,11,13:16,21,22,24:28,30,36,38,43,47,49,51,59)]
# common_hx_model_pathway_main=common_jd_model_pathway[c(1,4:7,9,10,16,18,20,22,25,31:33,37:39,46,50)]
#
# common_quan_jd_pathway_main=common_quan_jd_pathway[c(1,2,4,5,13:15,20)]
# common_quan_wen_pathway_main=common_quan_wen_pathway[c(1:3,5,6,8,9,12,13,17,18,21,23,25,26,30)]
# common_quan_hx_pathway_main=common_quan_hx_pathway[c(1,3,5,6,8,12,13,15,16,18,23:25,27,32)]



####### ENSEMBL ID to ENTREZ ID
transID<-function(id){
  geneid<-tryCatch(
    bitr(id,fromType = 'ENSEMBL',toType = "ENTREZID",OrgDb = "org.Rn.eg.db")[1,2],

    error=function(error_message) {
      # message("And below is the error message from R:")
      message(error_message)
      return('NA')
    }
  )
  return(geneid)
}


###### 建立通路定量表达谱
EstablishProfile<-function(id,expression,pathway){

  profile<-data.frame()


  emsemblid=transID(id)
  print(nrow(emsemblid))
  #### delete duplicate entries
  emsemblid=emsemblid[!duplicated(emsemblid[,1]),]
  print(nrow(emsemblid))
  emsemblid=emsemblid[!duplicated(emsemblid[,2]),]
  print(nrow(emsemblid))

  for(i in 1:nrow(emsemblid)){
    proid<-emsemblid[i,2]

    ############## Compute the row vector of the profile
    exvector<-c()
    for(j in 1:length(pathway)){
      if(proid%in%kg.sets[[pathway[j]]]){exvector<-c(exvector,expression[i])}
      else{exvector<-c(exvector,0)}
    }
    profile<-rbind(profile,exvector)
  }

  # rownames(model_sham_profile)<-profile_row_model_sham
  rownames(profile)<-emsemblid[,2]
  colnames(profile)<-pathway
  profile=profile[rowSums(profile)>0,]
  return(profile)
}


model_sham_profile<-EstablishProfile(rownames(NOIdiffSH[[1]]),NOIdiffSH[[1]][,2],common_pathway)
quan_model_profile<-EstablishProfile(rownames(NOIdiffQS[[1]]),NOIdiffQS[[1]][,2],common_pathway)
hx_model_profile<-EstablishProfile(rownames(NOIdiffHX[[1]]),NOIdiffHX[[1]][,1],common_pathway)
wen_model_profile<-EstablishProfile(rownames(NOIdiffWY[[1]]),NOIdiffWY[[1]][,2],common_pathway)
jd_model_profile<-EstablishProfile(rownames(NOIdiffJD[[1]]),NOIdiffJD[[1]][,1],common_pathway)









#############################################################################
#############################     MCIA    ###################################
#############################################################################

library('omicade4')
data<-list(MX=model_sham_profile,QS=quan_model_profile,JD=jd_model_profile,WY=wen_model_profile,HX=hx_model_profile)
type<-colnames(data$QS)
# type<-sapply(strsplit(type,split="_"),function(x) x[1])
mcoin<-mcia(data)
axis<-mcoin$mcoa$Tli
plot(mcoin,df.color=1:5, phenovec=type,sample.lab = FALSE,sample.legend = TRUE)




######## choose genes in pathway as row varibles
EstablishProfile_gene_in_pathway<-function(id,expression,pathway){

  profile<-data.frame()



  emsemblid=transID2ensembl(id)
  #### delete duplicate entries
  emsemblid=emsemblid[!duplicated(emsemblid[,1]),]

  for(i in 1:nrow(emsemblid)){

    # if(as.character(i) %in% rownames(emsemblid)==FALSE){
    #   next
    # }
    proid<-emsemblid[i,1]
    en_id<-emsemblid[i,2]

    ############## Compute the row vector of the profile
    exvector<-c()
    for(j in 1:length(pathway)){
      if(proid%in%kg.sets[[pathway[j]]]&en_id%in%rownames(expression)){
        exp=mean(as.numeric(expression[rownames(expression)==en_id,]))
        exvector<-c(exvector,exp)
      }
      else{exvector<-c(exvector,0)}
    }
    profile<-rbind(profile,exvector)
    # if(sum(exvector)==0){next}
    # else{
    #   # if(proid %in% rowname_profile){next}
    #   rowname_profile<-c(rowname_profile,proid)
    #   profile<-rbind(profile,exvector)
    # }
    print(i)
  }
  # rownames(model_sham_profile)<-profile_row_model_sham
  rownames(profile)<-emsemblid[,1]
  colnames(profile)<-pathway
  profile=profile[rowSums(profile)>0,]
  return(profile)
}

#########################################################
############### Random expression profile ##############
#########################################################



########  Distance Compute Function

distance<-function(co1,co2){
  matrix<-rbind(co1,co2)
  dis<-dist(matrix)
  return(dis)
}




################################################
######## Generate Random Expression Profile
#################################################

# random_profile<-function(real_profile,input_pathway){
#   random_profile<-as.data.frame(matrix(nrow=nrow(real_profile),ncol=length(input_pathway)))
#   ################ save all values in a vector, then random sampling in the vector (replace=True)
#   exvector<-c()
#   for(i in 1:nrow(real_profile)){
#     exvector<-c(exvector,real_profile[i,])
#   }
#   for(i in 1:nrow(real_profile)){
#     random_profile[i,]=rep(0,length(input_pathway))
#
#     flag=FALSE
#     while(flag==FALSE){
#     for(j in 1:length(input_pathway)){
#       random_profile[i,j]=sample(exvector,1,replace=TRUE)
#     }
#     if(sum(random_profile[i,])==0){flag=FALSE}
#     else{flag=TRUE}
#     }
#
#   }
#   rownames(random_profile)=rownames(real_profile)
#   colnames(random_profile)=colnames(real_profile)
#   return(random_profile)
# }



random_profile2<-function(real_profile,input_pathway){
  ################ save all values in a vector, then random sampling in the vector (replace=True)

  exvector<-as.vector(as.matrix(real_profile))
  random_profile=data.frame()

  random_zz<-function(n){
    print(n)
    flag=FALSE
    ############ keep random matrix size same with real one by this random way
    while(flag==FALSE){
      sample=sample(exvector,ncol(real_profile),replace=TRUE)
      if(sum(sample)==0){flag=FALSE}
      else{flag=TRUE}
    }
    return(sample)
  }

  results <- parLapply(cl,1:nrow(real_profile),random_zz)
  random_profile <- do.call('rbind',results)

  rownames(random_profile)=rownames(real_profile)
  colnames(random_profile)=colnames(real_profile)

  # random_profile=random_profile[rowSums(random_profile)>0,]####### remove sum==0 rows
  return(random_profile)
}

############ Compute MCIA of random profile
Get_mcia_distance<-function(profile1,profile2,input_pathway){
  data_random<-list(group1=profile1,group2=profile2)
  type_random<-colnames(data_random$group1)
  mcoin_random<-mcia(data_random)
  # plot(mcoin_random)
  axis_random<-mcoin_random$mcoa$Tli

  #######compute distance between pathways
  dis<-c()
  for(i in 1:length(input_pathway)){

    strcon1=paste(input_pathway[i],paste('.','group1',sep=''),sep='')
    strcon2=paste(input_pathway[i],paste('.','group2',sep=''),sep='')
    index1=c(rownames(axis_random)==strcon1)
    coordinate_con1<-axis_random[index1,]
    index2=c(rownames(axis_random)==strcon2)
    coordinate_con2<-axis_random[index2,]
    dis_con1_con2<-distance(coordinate_con1,coordinate_con2)
    dis<-c(dis,dis_con1_con2)
  }
  return(dis)
}













##########################################################################
######################################## two exp_profiles by MCIA
#######################################################################

Compute_distance_onethousand_times<-function(real_profile1,real_profile2,input_pathway){
  ########### real part
  dis_real=Get_mcia_distance(real_profile1,real_profile2,input_pathway)
  cl <- makeCluster(4)
  ########### random part
  dis_random_all<-data.frame()
  for(i in 1:999){
    group_one_random<-random_profile2(real_profile1,input_pathway)
    group_two_random<-random_profile2(real_profile2,input_pathway)
    dis_random<-Get_mcia_distance(group_one_random,group_two_random,input_pathway)
    dis_random_all<-rbind(dis_random_all,dis_random)
    print(i)
  }
  stopCluster(cl)
  dis_combined=rbind(dis_random_all,dis_real)

  colnames(dis_combined)=input_pathway
  ########## compute p-value
  pvalue_pathway<-c()
  for(i in 1:length(input_pathway)){
    sig_count=length(dis_combined[,i][dis_combined[,i]>=dis_combined[1000,i]])
    pvalue=sig_count/1000
    pvalue_pathway<-c(pvalue_pathway,pvalue)
  }

  ########## get significant pathway
  pathway_pvalue<-data.frame(pathname=input_pathway,pvalue=pvalue_pathway)
  significant_pathway<-pathway_pvalue[pathway_pvalue[,2]<=0.05,]
  list=list(pathway_pvalue,significant_pathway)
  return(list)
  # return(pathway_pvalue)
  # return(dis_combined)
}


gene_in_pathway<-function(pathway){
  gene<-c()
  for(i in 1:length(pathway)){
    gene_in_pathway=kg.sets[[pathway[i]]]
    gene=union(gene,gene_in_pathway)
  }
  return(gene)
}
gene_common_quan_model=gene_in_pathway(common_quan_model_pathway)
gene_common_jd_model=gene_in_pathway(common_jd_model_pathway)
gene_common_wen_model=gene_in_pathway(common_wen_model_pathway)
gene_common_hx_model=gene_in_pathway(common_hx_model_pathway)


gene_quan_vs_model_profile<-EstablishProfile_gene_in_pathway(gene_common_quan_model,normed_quan,common_quan_model_pathway)
gene_model_vs_quan_profile<-EstablishProfile_gene_in_pathway(gene_common_quan_model,normed_model,common_quan_model_pathway)
gene_sig_pathway_quan_model=Compute_distance_onethousand_times(gene_model_vs_quan_profile,gene_quan_vs_model_profile,common_quan_model_pathway)


gene_jd_vs_model_profile<-EstablishProfile_gene_in_pathway(gene_common_jd_model,normed_jd,common_jd_model_pathway)
gene_model_vs_jd_profile<-EstablishProfile_gene_in_pathway(gene_common_jd_model,normed_model,common_jd_model_pathway)


gene_wen_vs_model_profile<-EstablishProfile_gene_in_pathway(gene_common_wen_model,normed_wen,common_wen_model_pathway)
gene_model_vs_wen_profile<-EstablishProfile_gene_in_pathway(gene_common_wen_model,normed_model,common_wen_model_pathway)


gene_hx_vs_model_profile<-EstablishProfile_gene_in_pathway(gene_common_hx_model,normed_hx,common_hx_model_pathway)
gene_model_vs_hx_profile<-EstablishProfile_gene_in_pathway(gene_common_hx_model,normed_model,common_hx_model_pathway)

# plot_mcia<-function(profile1,profile2,input_pathway){
#   data_random<-list(group1=profile1,group2=profile2)
#   type_random<-colnames(data_random$group1)
#   mcoin_random<-mcia(data_random)
#   plot(mcoin_random,phenovec=type_random,sample.lab = FALSE,sample.legend =TRUE,cex=0.01)
# }
# plot_mcia(quan_vs_model_profile,model_vs_quan_profile,common_quan_model_GO)
# plot_mcia(jd_vs_model_profile,model_vs_jd_profile,common_jd_model_GO)
# plot_mcia(wen_vs_model_profile,model_vs_wen_profile,common_wen_model_GO)
# plot_mcia(hx_vs_model_profile,model_vs_hx_profile,common_hx_model_GO)

model_vs_quan_profile<-EstablishProfile(rownames(NOIdiffSH[[1]]),NOIdiffSH[[1]][,1],common_quan_model_pathway)
quan_vs_model_profile<-EstablishProfile(rownames(NOIdiffQS[[1]]),NOIdiffQS[[1]][,2],common_quan_model_pathway)

model_vs_jd_profile<-EstablishProfile(rownames(NOIdiffSH[[1]]),NOIdiffSH[[1]][,2],common_jd_model_pathway)
jd_vs_model_profile<-EstablishProfile(rownames(NOIdiffJD[[1]]),NOIdiffJD[[1]][,1],common_jd_model_pathway)

model_vs_wen_profile<-EstablishProfile(rownames(NOIdiffSH[[1]]),NOIdiffSH[[1]][,1],common_wen_model_pathway)
wen_vs_model_profile<-EstablishProfile(rownames(NOIdiffWY[[1]]),NOIdiffWY[[1]][,2],common_wen_model_pathway)

model_vs_hx_profile<-EstablishProfile(rownames(NOIdiffSH[[1]]),NOIdiffSH[[1]][,2],common_hx_model_pathway)
hx_vs_model_profile<-EstablishProfile(rownames(NOIdiffHX[[1]]),NOIdiffHX[[1]][,1],common_hx_model_pathway)

################# quan vs model
sig_pathway_quan_model=Compute_distance_onethousand_times(model_vs_quan_profile,quan_vs_model_profile,common_quan_model_pathway)
################# jd vs model
sig_pathway_jd_model=Compute_distance_onethousand_times(model_vs_jd_profile,jd_vs_model_profile,common_jd_model_pathway)
################# wen vs model
sig_pathway_wen_model=Compute_distance_onethousand_times(model_vs_wen_profile,wen_vs_model_profile,common_wen_model_pathway)
################# hx vs model
sig_pathway_hx_model=Compute_distance_onethousand_times(model_vs_hx_profile,hx_vs_model_profile,common_hx_model_pathway)


quan_vs_jd_profile<-EstablishProfile(rownames(NOIdiffQS[[1]]),NOIdiffQS[[1]][,2],common_quan_jd_pathway)
jd_vs_quan_profile<-EstablishProfile(rownames(NOIdiffJD[[1]]),NOIdiffJD[[1]][,1],common_quan_jd_pathway)

quan_vs_wen_profile<-EstablishProfile(rownames(NOIdiffQS[[1]]),NOIdiffQS[[1]][,2],common_quan_wen_pathway)
wen_vs_quan_profile<-EstablishProfile(rownames(NOIdiffWY[[1]]),NOIdiffWY[[1]][,2],common_quan_wen_pathway)

quan_vs_hx_profile<-EstablishProfile(rownames(NOIdiffQS[[1]]),NOIdiffQS[[1]][,2],common_quan_hx_pathway)
hx_vs_quan_profile<-EstablishProfile(rownames(NOIdiffHX[[1]]),NOIdiffHX[[1]][,1],common_quan_hx_pathway)

################# quan vs jd
sig_pathway_quan_jd=Compute_distance_onethousand_times(quan_vs_jd_profile,jd_vs_quan_profile,common_quan_jd_pathway)
################# quan vs wen
sig_pathway_quan_wen=Compute_distance_onethousand_times(quan_vs_wen_profile,wen_vs_quan_profile,common_quan_wen_pathway)
################# quan vs hx
sig_pathway_quan_hx=Compute_distance_onethousand_times(quan_vs_hx_profile,hx_vs_quan_profile,common_quan_hx_pathway)



























#########################################################################
#####################################  multi exp_profiles by MCIA
#########################################################################
Input_group<-function(group1,group2,axis,input_pathway){
  dis<-c()
  for(i in 1:length(input_pathway)){
    strcon1=paste(input_pathway[i],paste('.',group1,sep=''),sep='')
    strcon2=paste(input_pathway[i],paste('.',group2,sep=''),sep='')
    index1=c(rownames(axis)==strcon1)
    coordinate_con1<-axis[index1,]
    index2=c(rownames(axis)==strcon2)
    coordinate_con2<-axis[index2,]
    dis_con1_con2<-distance(coordinate_con1,coordinate_con2)
    dis<-c(dis,dis_con1_con2)
  }
  return(dis)
}

Get_mcia_distance_five<-function(profile1,profile2,profile3,profile4,profile5,input_pathway){
  data_random<-list(model=profile1,qs=profile2,jd=profile3,wy=profile4,hx=profile5)
  type_random<-colnames(data_random$model)
  mcoin_random<-mcia(data_random)
  # plot(mcoin_random)
  axis_random<-mcoin_random$mcoa$Tli

  #######compute distance between pathways

  list=list()
  list[[1]]=Input_group('model','qs',axis_random,input_pathway)
  list[[2]]=Input_group('model','jd',axis_random,input_pathway)
  list[[3]]=Input_group('model','wy',axis_random,input_pathway)
  list[[4]]=Input_group('model','hx',axis_random,input_pathway)
  list[[5]]=Input_group('qs','jd',axis_random,input_pathway)
  list[[6]]=Input_group('qs','wy',axis_random,input_pathway)
  list[[7]]=Input_group('qs','hx',axis_random,input_pathway)
  list[[8]]=Input_group('jd','wy',axis_random,input_pathway)
  list[[9]]=Input_group('jd','hx',axis_random,input_pathway)
  list[[10]]=Input_group('wy','hx',axis_random,input_pathway)

  return(list)
}

library(parallel)
Compute_distance_onethousand_times_five<-function(real_profile1,real_profile2,real_profile3,real_profile4,real_profile5,input_pathway){


   ########### real part
   dis_real=Get_mcia_distance_five(real_profile1,real_profile2,real_profile3,real_profile4,real_profile5,input_pathway)
   print('real done')
   ########### random part
   dis_random_all<-list()
   for(i in 1:10){
     dis_random_all[[i]]=data.frame()
   }
   cl <- makeCluster(4)
   for(i in 1:999){
    print('random start')
    print(i)
    group_one_random<-random_profile2(real_profile1,input_pathway)
    group_two_random<-random_profile2(real_profile2,input_pathway)
    group_three_random<-random_profile2(real_profile3,input_pathway)
    group_four_random<-random_profile2(real_profile4,input_pathway)
    group_five_random<-random_profile2(real_profile5,input_pathway)
    print('random done')
    dis_random<-Get_mcia_distance_five(group_one_random,group_two_random,group_three_random,group_four_random,group_five_random,input_pathway)
    for(j in 1:10){
      dis_random_all[[j]]<-rbind(dis_random_all[[j]],dis_random[[j]])
    }
   }
   stopCluster(cl)


  dis_combined=list()
  sig_path=list()
  for(i in 1:10){
    dis_combined[[i]]<-rbind(dis_random_all[[i]],dis_real[[i]])
    colnames(dis_combined[[i]])=input_pathway

    ########## compute p-value
    pvalue_pathway<-c()
    for(j in 1:length(input_pathway)){
      sig_count=length(dis_combined[[i]][,j][dis_combined[[i]][,j]>=dis_combined[[i]][1000,j]])
      pvalue=sig_count/1000
      pvalue_pathway<-c(pvalue_pathway,pvalue)
    }

    ########## get significant pathway
    pathway_pvalue<-data.frame(pathname=input_pathway,pvalue=pvalue_pathway)
    significant_pathway<-pathway_pvalue[pathway_pvalue[,2]<=0.05,]
    sig_path[[i]]=list(pathway_pvalue,significant_pathway)
  }

  return(sig_path)
  # return(dis_real)
}



model_sham_profile<-EstablishProfile(rownames(NOIdiffSH[[1]]),NOIdiffSH[[1]],common_pathway)
quan_model_profile<-EstablishProfile(rownames(NOIdiffQS[[1]]),NOIdiffQS[[1]],common_pathway)
hx_model_profile<-EstablishProfile(rownames(NOIdiffHX[[1]]),NOIdiffHX[[1]],common_pathway)
wen_model_profile<-EstablishProfile(rownames(NOIdiffWY[[1]]),NOIdiffWY[[1]],common_pathway)
jd_model_profile<-EstablishProfile(rownames(NOIdiffJD[[1]]),NOIdiffJD[[1]],common_pathway)
result=Compute_distance_onethousand_times_five(model_sham_profile,quan_model_profile,jd_model_profile,hx_model_profile,wen_model_profile,common_pathway)
############# this result is not good



















###################################################################
############################################   GO函数
enrichgo<-function(ensemblid){
  geneid<-bitr(ensemblid,fromType = 'ENSEMBL',toType = 'ENTREZID',OrgDb = 'org.Rn.eg.db', drop = FALSE)
  ##### 生物过程
  ego_bp<- enrichGO(gene=as.character(geneid[,2]),OrgDb = 'org.Rn.eg.db',ont="ALL",pvalueCutoff=0.0005,readable=TRUE)
  # ##### 分子功能
  # ego_mf<- enrichGO(gene=as.character(geneid[,2]),OrgDb = 'org.Rn.eg.db',ont="MF",pvalueCutoff=0.0001,readable=TRUE)
  #
  #
  #
  # ego_cc<- enrichGO(gene=as.character(geneid[,2]),OrgDb = 'org.Rn.eg.db',ont="CC",pvalueCutoff=0.0001,readable=TRUE)
  #

  # summary_mf=summary(ego_mf)
  # summary_cc=summary(ego_cc)
  # list=list(summary_bp,summary_mf,summary_cc)
  # return(list)
  return(ego_bp)
}
go_model_sham=enrichgo(rownames(NOIdiffSH[[1]]))
go_quan_model=enrichgo(rownames(NOIdiffQS[[1]]))
go_jd_model=enrichgo(rownames(NOIdiffJD[[1]]))
go_wen_model=enrichgo(rownames(NOIdiffWY[[1]]))
go_hx_model=enrichgo(rownames(NOIdiffHX[[1]]))
# dotplot(go_model_sham)




# ges_go<-function(genelist){
#   # geneid<-bitr(genelist,fromType = 'ENSEMBL',toType = 'ENTREZID',OrgDb = 'org.Rn.eg.db', drop = FALSE)
#   # geneid<-as.numeric(geneid[,2])[order(as.numeric(geneid[,2]),decreasing = TRUE)]
#   ego<-gseGO(geneList = genelist,
#         keyType = 'ENSEMBL',
#         OrgDb        = org.Rn.eg.db,
#         ont          = "BP",
#         nPerm        = 1000,
#         minGSSize    = 100,
#         maxGSSize    = 500,
#         pvalueCutoff = 0.05,
#         verbose      = FALSE)
#   return(ego)
# }
# ges_go(rownames(NOIdiffSH[[1]]))



common_quan_model_GO=intersect(go_quan_model[,1],go_model_sham[,1])
common_jd_model_GO=intersect(go_jd_model[,1],go_model_sham[,1])
common_wen_model_GO=intersect(go_wen_model[,1],go_model_sham[,1])
common_hx_model_GO=intersect(go_hx_model[,1],go_model_sham[,1])

common_go<-union(go_quan_model[,2],go_model_sham[,2])
common_go<-union(common_go,go_jd_model[,2])
common_go<-union(common_go,go_wen_model[,2])
common_go<-union(common_go,go_hx_model[,2])

################## Get GO Descriptions from GO summary
Description_GO<-function(go_summmary,commmon_go){
  des<-data.frame()
  for(i in 1:length(commmon_go)){
    for(j in 1:nrow(go_summmary)){
      if(commmon_go[i]==go_summmary[j,1]){
        des<-rbind(des,go_summmary[j,c(1,2)])
        break
      }
    }
  }
  return(des)
}

desGO_quan_model=Description_GO(go_quan_model,common_quan_model_GO)
desGO_jd_model=Description_GO(go_jd_model,common_jd_model_GO)
desGO_wen_model=Description_GO(go_wen_model,common_wen_model_GO)
desGO_hx_model=Description_GO(go_hx_model,common_hx_model_GO)

# library(GO.db)



###### 建立GO定量表达谱
EstablishProfile_GO<-function(id,expression,pathway){



  profile<-data.frame()
  rowname_profile=c()
  for(i in 1:nrow(expression)){

    ######### get ENTREZ ID
    proid<-transID(id[i])

    ############## Compute the row vector of the profile
    exvector<-c()
    for(j in 1:length(pathway)){
      if(proid%in%GO_map[[j]]){exvector<-c(exvector,expression[i,1])}
      else{exvector<-c(exvector,0)}
    }
    if(sum(exvector)==0){next}
    else{
      if(proid %in% rowname_profile){next}
      rowname_profile<-c(rowname_profile,proid)
      profile<-rbind(profile,exvector)
    }
  }
  # rownames(model_sham_profile)<-profile_row_model_sham
  colnames(profile)<-pathway
  rownames(profile)<-rowname_profile
  return(profile)
}


## 不好用 查看GO包含的基因
# library('biomaRt')
# ensembl=useMart("ensembl")
# listDatasets(ensembl)
# ensembl = useDataset("rnorvegicus_gene_ensembl",mart=ensembl)
# ensembl = useMart("ensembl",dataset="rnorvegicus_gene_ensembl")
# listFilters(ensembl)
# getBM(attributes='entrezgene', filters='go', values='GO:0004707', mart=ensembl)




# x <- org.Rn.egGO
# # Get the entrez gene identifiers that are mapped to a GO ID
# mapped_genes <- mappedkeys(x)
# # Convert to a list
# xx <- as.list(x[mapped_genes])

# xx <- as.list(org.Rn.egGO2EG)

#########################  GO and ENTREZ gene Mapping
GO_map <- as.list(org.Rn.egGO2ALLEGS)



Get_mcia_distance_go<-function(profile1,profile2,input_pathway){
  data_random<-list(group1=profile1,group2=profile2)
  type_random<-colnames(data_random$group1)
  mcoin_random<-mcia(data_random)
  # plot(mcoin_random)
  axis_random<-mcoin_random$mcoa$Tli

  #######compute distance between pathways
  dis<-c()
  for(i in 1:length(input_pathway)){
    go_name<-str_split(input_pathway[i],':')
    go_name_new<-str_c(go_name[[1]][1],'.')
    go_name_new<-str_c(go_name_new,go_name[[1]][2])
    strcon1=paste(go_name_new,paste('.','group1',sep=''),sep='')
    strcon2=paste(go_name_new,paste('.','group2',sep=''),sep='')
    index1=c(rownames(axis_random)==strcon1)
    coordinate_con1<-axis_random[index1,]
    index2=c(rownames(axis_random)==strcon2)
    coordinate_con2<-axis_random[index2,]
    dis_con1_con2<-distance(coordinate_con1,coordinate_con2)
    dis<-c(dis,dis_con1_con2)
  }
  # con<-c('sham','quan','jd','wen','hx')
  # combn_con<-combn(con,2)
  # for(i in 1:ncol(combn_con)){
  #   con_compare<-combn_con[,i]
  #   dis_con1_con2<-distance(con_compare[1],con_compare[2])
  # }
  return(dis)
}


Compute_distance_onethousand_times_go<-function(real_profile1,real_profile2,input_pathway){
  ########### real part
  dis_real=Get_mcia_distance_go(real_profile1,real_profile2,input_pathway)

  ########### random part
  dis_random_all<-data.frame()
  for(i in 1:999){
    group_one_random<-random_profile(real_profile1,input_pathway)
    group_two_random<-random_profile(real_profile2,input_pathway)
    dis_random<-Get_mcia_distance_go(group_one_random,group_two_random,input_pathway)
    dis_random_all<-rbind(dis_random_all,dis_random)
    print(i)
  }

  dis_combined=rbind(dis_random_all,dis_real)

  colnames(dis_combined)=input_pathway
  ########## compute p-value
  pvalue_pathway<-c()
  for(i in 1:length(input_pathway)){
    sig_count=length(dis_combined[,i][dis_combined[,i]>=dis_combined[1000,i]])
    pvalue=sig_count/1000
    pvalue_pathway<-c(pvalue_pathway,pvalue)
  }

  ########## get significant pathway
  pathway_pvalue<-data.frame(pathname=input_pathway,pvalue=pvalue_pathway)
  significant_pathway<-pathway_pvalue[pathway_pvalue[,2]<=0.05,]
  list=list(pathway_pvalue,significant_pathway)
  return(list)
  # return(pathway_pvalue)
  # return(dis_combined)
}



########################## use GO result to build profile
model_vs_quan_profile_go<-EstablishProfile_GO(rownames(NOIdiffSH[[1]]),NOIdiffSH[[1]],common_quan_model_GO)
quan_vs_model_profile_go<-EstablishProfile_GO(rownames(NOIdiffQS[[1]]),NOIdiffQS[[1]],common_quan_model_GO)

model_vs_jd_profile_go<-EstablishProfile_GO(rownames(NOIdiffSH[[1]]),NOIdiffSH[[1]],common_jd_model_GO)
jd_vs_model_profile_go<-EstablishProfile_GO(rownames(NOIdiffJD[[1]]),NOIdiffJD[[1]],common_jd_model_GO)

model_vs_wen_profile_go<-EstablishProfile_GO(rownames(NOIdiffSH[[1]]),NOIdiffSH[[1]],common_wen_model_GO)
wen_vs_model_profile_go<-EstablishProfile_GO(rownames(NOIdiffWY[[1]]),NOIdiffWY[[1]],common_wen_model_GO)

model_vs_hx_profile_go<-EstablishProfile_GO(rownames(NOIdiffSH[[1]]),NOIdiffSH[[1]],common_hx_model_GO)
hx_vs_model_profile_go<-EstablishProfile_GO(rownames(NOIdiffHX[[1]]),NOIdiffHX[[1]],common_hx_model_GO)


################# quan vs model
sig_GO_quan_model=Compute_distance_onethousand_times_go(model_vs_quan_profile_go,quan_vs_model_profile_go,common_quan_model_GO)
################# jd vs model
sig_GO_jd_model=Compute_distance_onethousand_times_go(model_vs_jd_profile_go,jd_vs_model_profile_go,common_jd_model_GO)
################# wen vs model
sig_GO_wen_model=Compute_distance_onethousand_times_go(model_vs_wen_profile_go,wen_vs_model_profile_go,common_wen_model_GO)
################# hx vs model
sig_GO_hx_model=Compute_distance_onethousand_times_go(model_vs_hx_profile_go,hx_vs_model_profile_go,common_hx_model_GO)

#
#
# Compute_distance_onethousand_times_random2<-function(real_profile1,real_profile2,input_pathway){
#   ########### real part
#   dis_real=Get_mcia_distance(real_profile1,real_profile2,input_pathway)
#
#   ########### random part
#   dis_random_all<-data.frame()
#   for(i in 1:999){
#     group_one_random<-random_profile(real_profile1,input_pathway)
#     group_two_random<-random_profile(real_profile2,input_pathway)
#     dis_random<-Get_mcia_distance(group_one_random,group_two_random,input_pathway)
#     dis_random_all<-rbind(dis_random_all,dis_random)
#     print(i)
#   }
#
#   dis_combined=rbind(dis_random_all,dis_real)
#
#   colnames(dis_combined)=input_pathway
#   ########## compute p-value
#   pvalue_pathway<-c()
#   for(i in 1:length(input_pathway)){
#     sig_count=length(dis_combined[,i][dis_combined[,i]>=dis_combined[1000,i]])
#     pvalue=sig_count/1000
#     pvalue_pathway<-c(pvalue_pathway,pvalue)
#   }
#
#   ########## get significant pathway
#   pathway_pvalue<-data.frame(pathname=input_pathway,pvalue=pvalue_pathway)
#   significant_pathway<-pathway_pvalue[pathway_pvalue[,2]<=0.05,]
#   list=list(pathway_pvalue,significant_pathway)
#   return(list)
#   # return(pathway_pvalue)
#   # return(dis_combined)
# }
#
#
# result=Compute_distance_onethousand_times_five(model_sham_profile,quan_model_profile,jd_model_profile,hx_model_profile,wen_model_profile,common_pathway)
